<% content_for :head do -%>
<style type="text/css">
.box_content {
  padding: 0;
}
#plots .fileinfo, #columns, #parameters {
  width: 100%;
}
#plots .fileinfo {
  background-color: #ddd;
}
</style>
<% end -%>
<%# There shouldn't be a flash if the JS will run; no worries about adding an id -%>
<% unless flash[:notice] -%><h1 id="statusbar" class="notice"></h1><% end -%>
<div class="boxed">
<h1>Bottle Comparer</h1>
<div class="box_content">
<table id="columns">
  <tr><td id="controls" style="width: 30%; background-color: #dddddd;">
<% has_data = !(@filel.blank? or @filer.blank?) -%>
<% form_tag '/btlcmp', :multipart => true do -%>
<table id="parameters">
  <tr><td class="left"><%= file_field_tag 'filel_prompt' -%></td><td><%= file_field_tag 'filer_prompt' -%></td></tr>
  <tr><td colspan="2" class="center"><%= submit_tag 'Compare' -%> <label for="is_merge">with merge file on right</label><input id="is_merge" type="checkbox" name="merge_file" /></td></tr>
  <% if has_data -%>
    <tr>
      <td class="left">
        <% fnamelimit = 20 -%>
        <h1><%= if @filel_name.length > fnamelimit then @filel_name[-fnamelimit..-1] else @filel_name end -%></h1>
        <select id="lparams" class="params" size="<%= @filel.parameters.size -%>">
          <% @filel.parameters.each do |param| -%><option><%= param -%></option><% end -%>
        </select>
      </td>
      <td>
        <h1><%= if @filer_name.length > fnamelimit then @filer_name[-fnamelimit..-1] else @filer_name end -%></h1>
        <select id="rparams" class="params" size="<%= @filer.parameters.size -%>">
          <% @filer.parameters.each do |param| -%><option><%= param -%></option><% end -%>
        </select>
      </td>
    </tr>
    <tr>
      <td colspan="2" class="center">
        <p style="font-size: small; text-align: left;">Identifiers are from left file. Data on right is matched to them.</p>
        <div id="googletable" style="height: 400px;"></div>
      </td>
    </tr>
    <tr><td colspan="2" class="center"><input id="plot_button" type="button" value="Plot" /></td></tr>
  <% end -%>
</table>
<% end -%>
</td>
<% if has_data -%>
<td id="plots">
  <table class="fileinfo">
    <tr><td class="left"></td><td class="right"></td><td class="diff"></td></tr>
  </table>
  <div id="googleplot"></div>
</td>
<% end -%>
</tr>
</table>
<div class="box_bottom"></div>
</div>

<% if has_data -%>
<script type='text/javascript' src='http://www.google.com/jsapi?key=<%= getGAPIkey(request.env['HTTP_HOST']) -%>'></script>
<script type="text/javascript">
google.load('jquery', '1.3.2');
google.load('visualization', '1', {packages: ['scatterchart', 'table']});
var CCHDO = CCHDO ? CCHDO : {};
CCHDO.Btlcmp = function() {
  this.lparams = null;
  this.rparams = null;
  this.l_values = null;
  this.r_values = null;
  this.plot_box = null;
  this.ldata = <%= @filel_json -%>;
  this.rdata = <%= @filer_json -%>;
  this.controls = null;
  this.LCOL = 4;
  this.RCOL = 5;
  this.ABSDIFFCOL = 6;
  this.plot = null;
  this.data_table = null;
  this.data_table_data = null;
  this.data_table_opts = {
    allowHtml: true,
    width: '100%',
    sort: 'enable',
    page: 'enable',
    pageSize: 500,
    pagingSymbols: {prev: '&Delta;', next: '&nabla;'}
  };
  this.init();
};
CCHDO.Btlcmp.prototype = function() {};
CCHDO.Btlcmp.prototype.getIndexForIdentifier = function(file, stnn, cast, samp, btln) {
  for (var j=0; j<file.STNNBR.length; j++) {
    var stnnbr = file.STNNBR[j];
    var castno = file.CASTNO[j];
    var sampno = file.SAMPNO[j];
    var btlnbr = file.BTLNBR[j];
    if (cast == castno && stnn == stnnbr) {
      if (sampno && samp == sampno) {
        if (btlnbr) {
          if (btln == btlnbr) {
            return j;
          }
          return -1;
        }
        return j;
      }
      if (btlnbr && btln == btlnbr) {
        return j;
      }
    }
  }
};
CCHDO.Btlcmp.prototype.update_data_table_data = function(column, label, data) {
  if (!data || !this.data_table_data) {
    return;
  }
  
  this.data_table_data.setColumnLabel(column, label);
  /* Ensure data table capacity for new data */
  var data_length_diff = data.length - this.data_table_data.getNumberOfRows();
  if (data_length_diff > 0) {
    this.data_table_data.addRows(data_length_diff);
  }
  /* Switch the column type if necessary.
     HACK: technically shouldn't be able to do this according to API
     HACK: find the column property of the data_table_data by scanning properties
   */
  var columns = this.data_table_data;
  for (var i in this.data_table_data) {
    var p = this.data_table_data[i];
    if (p && typeof p == 'object') {
      if (p[0].type) {
        columns = p;
      }
    }
  }
  columns[column].type = (typeof data[0]);

  /* Insert all the data points, matching on a unique identifier */
  var unmatched_orig_rows = 0;
  var matched_rows = 0;
  var unmatched_merge_rows = 0;
  var datafile = (column == this.LCOL) ? this.ldata : this.rdata;

  for (var i=0; i<this.data_table_data.getNumberOfRows(); i++) {
    var id_cast = this.data_table_data.getValue(i, 0);
    var id_stnn = this.data_table_data.getValue(i, 1);
    var id_samp = this.data_table_data.getValue(i, 2);
    var id_btln = this.data_table_data.getValue(i, 3);
  
    var index = this.getIndexForIdentifier(datafile, id_stnn, id_cast, id_samp, id_btln);
    if (index > -1) {
      this.data_table_data.setCell(i, column, data[index]);
      matched_rows++;
    } else {
      this.data_table_data.setCell(i, column, null);
      unmatched_orig_rows++;
    }
    unmatched_merge_rows = Math.max(this.rdata.STNNBR.length - this.ldata.STNNBR.length, 0);
  }
  
  /* Calculate diff */
  if (this.l_values === null || this.r_values === null) {
    this.newStatus("Cannot compare with missing or uneven columns.");
  } else {
    if (this.data_table_data.getColumnType(this.LCOL) != 'number' || 
        this.data_table_data.getColumnType(this.RCOL) != 'number') {
      this.newStatus("Cannot compare non-numbers.");
    } else {
      /* Generate absdiff */
      var absdiff_values = [];
      var diff = false;
      for (var i=0; i<this.data_table_data.getNumberOfRows(); i++) {
        var delta = Math.abs(this.data_table_data.getValue(i, this.LCOL)-
                             this.data_table_data.getValue(i, this.RCOL));
        this.data_table_data.setCell(i, this.ABSDIFFCOL, delta);
        if (delta !== 0 && isFinite(delta) && !isNaN(delta)) { diff = true; }
      }
      /* color absdiff according to complete matchness */
      var merge_status = "";
      if (column == this.RCOL) {
        merge_status = "<br />Data rows in"+
                       " original: "+this.ldata.STNNBR.length+" ("+unmatched_orig_rows+" unmatched)"+
                       " merge: "+this.rdata.STNNBR.length+" ("+unmatched_merge_rows+" unmatched)"+
                       " Matched: "+matched_rows;
      }
      if (diff) {
        this.newStatus("The matched value columns differ."+merge_status);
        this.data_table_data.setColumnLabel(this.ABSDIFFCOL, '<span style="color: #ff0000;">|&Delta;|</span>');
      } else {
        this.newStatus("The matched value columns are identical."+merge_status);
        this.data_table_data.setColumnLabel(this.ABSDIFFCOL, '<span style="color: #00ff00;">|&Delta;|</span>');
      }
    }
  }
  this.redraw_data_table();
};
CCHDO.Btlcmp.prototype.googleplot = function() {
  $('#googleplot').css('height', '500px');
  var data = this.data_table_data.clone();
  data.removeColumn(this.ABSDIFFCOL);
  data.removeColumns(0, this.LCOL);

  var value = -999;
  var toler = 1.0;
  for (var i=data.getNumberOfRows()-1; i>=0; i--) {
    var lval = data.getValue(i, 0);
    var rval = data.getValue(i, 1);
    if (!isFinite(lval) || !isFinite(rval)) {
      data.removeRow(i);
    } else if ((value-toler <= lval && lval <= value+toler) ||
        (value-toler <= rval && rval <= value+toler)) {
      data.removeRow(i);
    } else {
      data.setRowProperties(i, null);
    }
  }

  if (this.plot) {
    this.plot.draw(data, { title: data.getColumnLabel(0)+' vs '+data.getColumnLabel(1),
                           titleX: data.getColumnLabel(0),
                           titleY: data.getColumnLabel(1),
                           legend: 'none'
                         });
  }
};
CCHDO.Btlcmp.prototype.draw_plot = function() {
  if (!this.l_values || !this.r_values) {
    this.newStatus('Please select parameters to plot!');
    return;
  }
  if (this.data_table_data.getColumnType(this.LCOL) != 'number' || 
      this.data_table_data.getColumnType(this.RCOL) != 'number') {
    this.newStatus("Cannot plot non-numbers!");
  } else {
    this.googleplot();
  }
};
CCHDO.Btlcmp.prototype.redraw_data_table = function() {
  if (this.data_table) {
    this.data_table.draw(this.data_table_data, this.data_table_opts);
  }
};
CCHDO.Btlcmp.prototype.copyscroll = function(obj, objs) {
  function findScrollHeight(obj) {
    return obj.scrollHeight-obj.offsetHeight;
  }
  obj.onscroll = function(scr) {
    for (var i in objs) {
      var src = scr.target;
      var other = objs[i];
      var percentscroll = 1.0*src.scrollTop/findScrollHeight(src);
      other.scrollTop = Math.round(findScrollHeight(other) * percentscroll);
      /* hack to redraw the contents - specifically for Webkit */
      other.focus();
      other.blur();
    }
  };
};
CCHDO.Btlcmp.prototype.newStatus = function(str) {
  $('#statusbar').html(str).show();
};
CCHDO.Btlcmp.prototype.init = function() {
  var self = this;

  this.lparams = $('#lparams');
  this.rparams = $('#rparams');
  this.controls = $('#controls')[0];
  $('#statusbar').hide();
  $('#plot_button').click(function() {self.draw_plot();});

  this.copyscroll(this.lparams[0], [this.rparams[0]]);
  this.copyscroll(this.rparams[0], [this.lparams[0]]);

  this.lparams.change(function() {
    var p = $(this).val();
    if (p) {
      self.l_values = self.ldata[p];
      self.update_data_table_data(self.LCOL, p, self.l_values);
    }
  });
  this.rparams.change(function() {
    var p = $(this).val();
    if (p) {
      self.r_values = self.rdata[p];
      self.update_data_table_data(self.RCOL, p, self.r_values);
    }
  });

  var GV = google.visualization;
  this.data_table = new GV.Table($('#googletable')[0]);
  this.plot = new GV.ScatterChart($('#googleplot')[0]);
  <% ldat = @filel.data
    l_ids = ldat['CASTNO'].zip(ldat['STNNBR'], ldat['SAMPNO'], ldat['BTLNBR'])
    rdat = @filer.data
    r_ids = rdat['CASTNO'].zip(rdat['STNNBR'], rdat['SAMPNO'], rdat['BTLNBR'])
    ids = (l_ids+r_ids).uniq
  -%>
  this.data_table_data = new GV.DataTable({
    cols: [{label: 'Cast', type: 'number'}, {label: 'Station', type: 'number'},
           {label: 'Sample', type: 'number'}, {label: 'Bottle', type: 'number'},
           {label: '?', type: 'number'}, {label: '?', type: 'number'},
           {label: '|&Delta;|', type: 'number'}]
    <% if @filel -%>, rows: [<%= ids.collect {|id| "{c:[#{id.map {|x| "{v: #{x or 0}}"}.join ','}]}" }.join ', ' -%>]<% end -%>
  }, 0.6);
  /* Populate the data_table_data with all identifiers between the original and merge file */
  
  /* Talk about the files */
  $('.fileinfo .left').html('<h1><%= @filel_name -%></h1>'+
    '<ul>'+
    '<li><%= @filel.data.keys.length -%> parameters</li>'+
    '<li><%= @filel.data[@filel.data.keys.first].length -%> data rows</li>'+
    '</ul>');
  $('.fileinfo .right').html('<h1><%= @filer_name -%></h1>'+
    '<ul>'+
    '<li><%= @filer.data.keys.length -%> parameters</li>'+
    '<li><%= @filer.data[@filer.data.keys.first].length -%> data rows</li>'+
    '</ul>');
  $('.fileinfo .diff').html('<h1>Diff</h1>'+
    '<ul>'+
    '<li><%= ids.length-l_ids.length -%> new rows in merge file</li>'+
    '<li><%= ids.length-r_ids.length -%> deleted rows in merge file</li>'+
    '</ul>');

  /* Update the selections if already selected */
  this.lparams.change();
  this.rparams.change();
  this.redraw_data_table();
};

google.setOnLoadCallback(function() {
  CCHDO.btlcmp = new CCHDO.Btlcmp();
});
</script>
<% end -%>
