xml.instruct! :xml
xml.kml('xmlns' => "http://www.opengis.net/kml/2.2", 'xmlns:gx' => "http://www.google.com/kml/ext/2.2", 'xmlns:kml' => "http://www.opengis.net/kml/2.2", 'xmlns:atom' => "http://www.w3.org/2005/Atom") do
  xml.Document {
    xml.name("CCHDO search results for #{params[:query]}")
    def balloon_style(xml)
      xml.BalloonStyle {
        xml.bgColor('FF170A05')
        xml.textColor('ffffffff')
        xml.text(
			"<div style='width: 430px; position: absolute; margin-top: -20px; margin-left: -5px; margin-right: -5px;'>
			<img src='http://sio.ucsd.edu/google_oceans/map/images/sioHeader.gif' style='border: 0;' />
			<h1 style='color: #86b20d; font-size: large;'>$[name]</h1>
			<div style='line-height: 1.5em; color: #FFFFFF;'>$[description]</div>
      <div style='height: 2em;'><a href='http://sio.ucsd.edu/' style='color: #29ABE2; position: absolute; left: 0; bottom: 0;'>Scripps Oceanography</a> <a href='http://www.ucsd.edu/' style='color: #29ABE2; position: absolute; bottom: 0; right: 0;'>UC San Diego</a></div>
			</div>")
      }
    end
    xml.Style('id' => 'boat') {
      xml.IconStyle {
        xml.scale(1)
        xml.Icon {
          xml.href("http://maps.google.com/mapfiles/kml/shapes/ferry.png")
        }
      }
      balloon_style(xml)
    }
    xml.Style('id' => 'station') {
      xml.IconStyle {
        xml.scale(1.0)
        xml.Icon {
          xml.href("http://maps.google.com/mapfiles/kml/shapes/marina.png")
        }
      }
      balloon_style(xml)
    }
    xml.Style('id' => 'track') {
      xml.PolyStyle {
        xml.color('4d0aff00')
      }
      xml.LineStyle {
        xml.width(5.0)
        xml.color('ff0aff00')
      }
      balloon_style(xml)
    }
    if @cruises
      @cruises.each do |cruise|
        date = cruise.Begin_Date || 'Unknown'
        xml.Folder {
          xml.name(cruise.ExpoCode)
          xml.open(1)
          tracks = @tracks[cruise.ExpoCode]
          unless tracks.blank?
            def bearing(pta, ptb)
              return 0 unless ptb
              return (atan2(
                       sin(ptb.first-pta.first)*cos(ptb.last),
                       cos(pta.last)*sin(ptb.last)-sin(pta.last)*cos(ptb.last)*cos(ptb.first-pta.first)
                     ) % 2) / PI * -180

                     #tc1=mod(atan2(sin(lon2-lon1)*cos(lat2),
                     #cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2-lon1)),
                     #2*pi)
            end
            def look(xml, lng, lat, nextpt=nil)
              xml.LookAt {
                xml.longitude(lng)
                xml.latitude(lat)
                xml.altitude(400)
                xml.range(400)
                xml.tilt(80)
                if nextpt
                  temppt = []
                  temppt[0] = nextpt[1]
                  temppt[1] = nextpt[0]
                end
                #xml.heading(bearing([lng, lat], temppt))
                xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
              }
            end
            xml.Placemark {
              xml.name("#{cruise.ExpoCode} track")
              xml.description {xml.cdata!(cruise.Chief_Scientist)}
              look(xml, tracks.first.last, tracks.first.first, tracks[1])
              if cruise.Begin_Date
                xml.TimeSpan {
                  xml.begin(date)
                }
              end
              xml.styleUrl('#track')
              xml.LineString {
                xml.extrude(1)
                xml.tessellate(1)
                xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                xml.coordinates(tracks.map {|coord| "#{coord.last},#{coord.first},300"}.join(' '))
              }
            }
            first_track = tracks.shift
            xml.Placemark {
              xml.name("#{cruise.ExpoCode} start")
              xml.description([cruise.Ship_Name, cruise.Country, date, cruise.Alias, cruise.Group].map {|x| h(x)}.join(';'))
              look(xml, first_track.last, first_track.first, tracks.first)
              xml.styleUrl('#boat')
              xml.Point {
                xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                xml.coordinates("#{first_track.last},#{first_track.first},301")
              }
            }
            xml.Folder {
              xml.name("Stations")
              tracks.each_index do |i|
                coord = tracks[i]
                lonlat = "#{coord.last},#{coord.first}"
                xml.Placemark {
                  if cruise.Begin_Date
                    xml.TimeStamp {
                      xml.when(date)
                    }
                  end
                  xml.name("station")
                  xml.description("<p><strong>Lat:</strong> #{coord.first} <strong>Lon:</strong> #{coord.last}</p>")
                  look(xml, coord.last, coord.first, tracks[i+1])
                  xml.styleUrl('#station')
                  xml.Point {
                    xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                    xml.coordinates("#{lonlat},301")
                  }
                }
              end
            }
            xml.Folder {
              xml.name("Rosettes")
              xml.visibility(0)
              xml.open(0)

              xml.Placemark {
                xml.Model('id' => 'rosette') {
                  xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                  xml.Location {
                    xml.longitude(first_track.last)
                    xml.latitude(first_track.first)
                    xml.altitude(311)
                  }
                  xml.Orientation {
                    xml.heading(0)
                  }
                  xml.Scale {
                    scale = 20
                    xml.x(scale)
                    xml.y(scale)
                    xml.z(scale)
                  }
                  xml.Link {
                    xml.href('http://ushydro.ucsd.edu:3000/rosette.dae')
                  }
                }
              }
              tracks.each_index do |i|
                coord = tracks[i]
                xml.Placemark {
                  xml.Model('id' => 'rosette') {
                    xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                    xml.Location {
                      xml.longitude(coord.last)
                      xml.latitude(coord.first)
                      xml.altitude(311)
                    }
                    xml.Orientation {
                      xml.heading(0)
                    }
                    xml.Scale {
                      scale = 10
                      xml.x(scale)
                      xml.y(scale)
                      xml.z(scale)
                    }
                    xml.Link {
                      xml.href('http://ushydro.ucsd.edu:3000/rosette.dae')
                    }
                  }
                }
              end
            }
            xml.Folder {
              xml.name("Profiles")
              xml.visibility(0)
              xml.open(0)
              xml.PhotoOverlay {
                xml.name('profile plot')
                xml << "<gx:TimeStamp><when>#{date}</when></gx:TimeStamp>"
                xml.Camera {
                  xml.longitude(first_track.last)
                  xml.latitude(first_track.first)
                  xml.altitude(300)
                  xml.heading(0)
                  xml.tilt(90)
                  xml.roll(0)
                  xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                }
                xml.shape('rectangle')
                xml.Icon {
                  xml.href("http://cchdo.ucsd.edu/data/co2clivar/indian/i08/i08s_33RR20070204/KML/33RR20070204_00001_00001_plot.jpg")
                }
                xml.ViewVolume {
                  xml.leftFov(-40)
                  xml.rightFov(40)
                  xml.bottomFov(0)
                  xml.topFov(60)
                  xml.near(1000)
                }
              }
              tracks.each_index do |i|
                coord = tracks[i]
                xml.PhotoOverlay {
                  xml.name('profile plot')
                  xml << "<gx:TimeStamp><when>#{date}</when></gx:TimeStamp>"
                  xml.Camera {
                    xml.longitude(coord.last)
                    xml.latitude(coord.first)
                    xml.altitude(300)
                    xml.heading(0)
                    xml.tilt(90)
                    xml.roll(0)
                    xml << "<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>"
                  }
                  xml.shape('rectangle')
                  xml.Icon {
                    xml.href("http://cchdo.ucsd.edu/data/co2clivar/indian/i08/i08s_33RR20070204/KML/33RR20070204_00001_00001_plot.jpg")
                  }
                  xml.ViewVolume {
                    xml.leftFov(-40)
                    xml.rightFov(40)
                    xml.bottomFov(0)
                    xml.topFov(60)
                    xml.near(1000)
                  }
                }
              end
            }
          end
        }
      end
    end
  }
end
