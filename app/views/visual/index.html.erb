<div class="boxed">
<h1>Visual <%= @filename -%></h1>
<div class="box_content" style="padding: 0;">
<table id="columns" style="width: 100%;">
  <tr><td id="controls" style="width: 30%; background-color: #dddddd;">
  <% form_tag '/visual', :multipart => true do -%>
  <table id="parameters" style="width: 100%;">
    <tr><td><%= file_field_tag 'file' -%></td></tr>
    <tr><td><%= submit_tag 'View' -%></td></tr>
  </table>
  <% end -%>
  </td>
</tr>
</table>
<% if @wire -%>
  <div>
    <h1>Current station</h1>
    <div id="station"></div>
  </div>
  <div>
    <h1>Current observations</h1>
    <div id="observation"></div>
  </div>
  <div id="map" style="height: 400px; width: 100%;">Please wait...loading records</div>
  <div id="chart"></div>
<% end -%>
<div class="box_bottom"></div>
</div>

<% if @wire -%>
<% content_for :js do -%>
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js'></script>
<script type='text/javascript' src='http://www.google.com/jsapi?key=<%= getGAPIkey(request.env['HTTP_HOST']) -%>'></script>
<script type="text/javascript">
google.load('maps', '2.x');
google.load('visualization', '1', {packages: ['scatterchart', 'table', 'map']});
function getKey(key) {
  return key ? key.keyCode : event.keyCode;
}
Array.prototype.compare = function(testArr) {
  if (this.length != testArr.length) return false;
    for (var i = 0; i < testArr.length; i++) {
      if (this[i].compare) { 
        if (!this[i].compare(testArr[i])) return false;
      }
    if (this[i] !== testArr[i]) return false;
  }
  return true;
}
var currentRow = -1;
var currentStation = -1;
function init() {
  var GV = google.visualization;
  var data = <%= @wire -%>;
  var data_table = new GV.DataTable(data, 0.6);

  function colno_to_label(datatable) {
    var hash = {};
    for (var i=0; i<datatable.getNumberOfColumns(); i++) {
      hash[i] = datatable.getColumnLabel(i);
    }
    return hash;
  }

  var colno_to_label = colno_to_label(data_table);

  function invert_one_to_one(hash) {
    var newhash = {};
    for (var i in hash) {
      newhash[hash[i]] = parseInt(i, 10);
    }
    return newhash;
  }

  function getValuesFromKeys(hash) {
    var vals = [];
    var keys = arguments;
    for (var i=1; i<keys.length; i++) {
      vals.push(hash[keys[i]]);
    }
    return vals;
  }

  var label_to_colno = invert_one_to_one(colno_to_label);

  var chartView = new GV.DataView(data_table);
  //chartView.setColumns([label_to_colno['STNNBR'], {calc: function(dt,r) {
  //  var val = -1.0*dt.getValue(r, label_to_colno['CTDPRS']);
  //  return val;
  //  }, type:'number',label:'Inverse CTDPRS'}]);
  chartView.setColumns([label_to_colno['STNNBR'], label_to_colno['CTDPRS']]);

  var chart = new GV.ScatterChart($('#chart')[0]);
  var chartOpts = {height: 400, width: 1049, legend: 'none', pointSize: 2, focusBorderColor: '#ff0000'};
  chart.draw(chartView, chartOpts);

  //var motionchartView = new GV.DataView(data_table);
  //motionchartView.setColumns([label_to_colno['EXPOCODE'], label_to_colno['_DATETIME'], label_to_colno['CTDPRS'], label_to_colno['CTDSAL'], label_to_colno['CTDTMP']]);
  //var motionchart = new GV.MotionChart($('#motionchart')[0]);
  //var motionchartOpts = {width: '100%'};
  //motionchart.draw(motionchartView, motionchartOpts);

  var mapView = new GV.DataView(data_table);
  mapView.setColumns(getValuesFromKeys(label_to_colno, 'LATITUDE', 'LONGITUDE'));
  function uniquifyMapView(view) {
    var dupRows = [];
    var currVals = [];
    for (var i=0; i<view.getNumberOfRows(); i++) {
      var next = [];
      for (var j=0; j<view.getNumberOfColumns(); j++) {
        next.push(view.getValue(i, j));
      }
      if (!currVals.compare(next)) {
        currVals = next;
      } else {
        dupRows.push(i);
      }
    }
    view.hideRows(dupRows);
  }
  uniquifyMapView(mapView);
  var map = new GV.Map($('#map')[0]);
  var mapOpts = {
    enableScrollWheel: true,
    showTip: true,
    showLine: true,
    lineColor: '#00ff00',
    lineWidth: 1,
    mapType: 'satellite',
    zoomLevel: 3
  };
  map.draw(mapView, mapOpts);

  var stationView = new GV.DataView(data_table);
  stationView.setColumns(getValuesFromKeys(label_to_colno,
    'SECT_ID', 'STNNBR', 'CASTNO', 'SAMPNO', 'BTLNBR', 'LATITUDE', 'LONGITUDE', '_DATETIME', 'DEPTH'));
  var stationOpts = {allowHtml: true};
  var station = new GV.Table($('#station')[0]);

  var observationView = new GV.DataView(data_table);
  var observation = new GV.Table($('#observation')[0]);
  var observationOpts = {allowHtml: true, width: '100%'};

  function setRowVisible(row) {
    row = Math.max(0, row);
    row = Math.min(row, data_table.getNumberOfRows());
    if (currentRow == row) {return;}
    currentRow = row;
    var stnnbrcol = label_to_colno['STNNBR'];
    var stnnbr = data_table.getValue(row, stnnbrcol);

    var dataRows = data_table.getFilteredRows([{column: stnnbrcol, value: stnnbr}]);
    stationView.setRows([row]);
    station.draw(stationView, stationOpts);
    station.setSelection([{row: stationView.getViewRowIndex(row)}]);

    observationView.setRows([row]);
    observation.draw(observationView, observationOpts);
    observation.setSelection([{row: observationView.getViewRowIndex(row)}]);

    map.setSelection([{row: mapView.getViewRowIndex(dataRows[0])}]);

    chart.setSelection([{row: chartView.getViewRowIndex(row), col: label_to_colno['CTDPRS']}]);

    currentStation = stnnbr;
  }

  function setStationVisible(stnnbr) {
    if (currentStation == stnnbr) {return;}
    var stnnbrcol = label_to_colno['STNNBR'];
    var dataRows = data_table.getFilteredRows([{column: stnnbrcol, value: stnnbr}]);
    setRowVisible(dataRows[0]);
  }

  GV.events.addListener(map, 'select', function() {
    var selection = this.getSelection();
    for (var i in selection) {
      var selectedrow = mapView.getTableRowIndex(selection[i].row);
      setRowVisible(selectedrow);
    }
  });

  GV.events.addListener(chart, 'select', function() {
    var selection = this.getSelection();
    for (var i in selection) {
      var selectedrow = chartView.getTableRowIndex(selection[i].row);
      setRowVisible(selectedrow);
    }
  });

  $(document).keydown(function (e) {
    switch (getKey(e)) {
      case 37: setRowVisible(currentRow - 1); break;
      case 39: setRowVisible(currentRow + 1); break;
      default: break;
    }
  });

  setRowVisible(0);
}
google.setOnLoadCallback(init);
</script>
<% end -%>
<% end -%>
