<div class="boxed">
<h1>Visual <%= @filename -%></h1>
<div class="box_content" style="padding: 0;">
<table id="columns" style="width: 100%;">
  <tr><td id="controls" style="width: 30%; background-color: #dddddd;">
  <% form_tag '/visual', :multipart => true do -%>
  <table id="parameters" style="width: 100%;">
    <tr><td><%= file_field_tag 'file' -%></td></tr>
    <tr><td><%= submit_tag 'View' -%></td></tr>
  </table>
  <% end -%>
  </td>
</tr>
</table>
<% if @wire -%>
  <div>
    <h1>Current station</h1>
    <div id="station"></div>
  </div>
  <div id="map" style="height: 400px; width: 100%;">Please wait...loading records</div>
  <div>
    <h1>Current observations</h1>
    <div id="observation"></div>
  </div>
  <div id="chart"></div>
  <div id="test"></div>
<% end -%>
<div class="box_bottom"></div>
</div>

<% if @wire -%>
<% content_for :js do -%>
<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js'></script>
<script type='text/javascript' src='http://www.google.com/jsapi?key=<%= getGAPIkey(request.env['HTTP_HOST']) -%>'></script>
<script type="text/javascript">
google.load('maps', '2.x');
google.load('visualization', '1', {packages: ['scatterchart', 'table', 'areachart', 'map']});
Array.prototype.compare = function(testArr) {
  if (this.length != testArr.length) return false;
    for (var i = 0; i < testArr.length; i++) {
      if (this[i].compare) { 
        if (!this[i].compare(testArr[i])) return false;
      }
    if (this[i] !== testArr[i]) return false;
  }
  return true;
}
var data_table;
function init() {
  var GV = google.visualization;
  var data = <%= @wire -%>;
  data_table = new GV.DataTable(data, 0.6);

  function colno_to_label(datatable) {
    var hash = {};
    for (var i=0; i<datatable.getNumberOfColumns(); i++) {
      hash[i] = datatable.getColumnLabel(i);
    }
    return hash;
  }

  var colno_to_label = colno_to_label(data_table);

  function invert_one_to_one(hash) {
    var newhash = {};
    for (var i in hash) {
      newhash[hash[i]] = parseInt(i, 10);
    }
    return newhash;
  }

  function getValuesFromKeys(hash, keys) {
    var vals = [];
    var keys = getValuesFromKeys.arguments;
    for (var i=1; i<keys.length; i++) {
      vals.push(hash[keys[i]]);
    }
    return vals;
  }

  var label_to_colno = invert_one_to_one(colno_to_label);

  var view = new GV.DataView(data_table);
  view.setColumns(getValuesFromKeys(label_to_colno, 'STNNBR', 'CTDPRS'));

  var chart = new GV.ScatterChart($('#chart')[0]);
  var chartOpts = {height: 400, width: 400, legend: 'none'};
  chart.draw(view, chartOpts);

  var mapView = new GV.DataView(data_table);
  mapView.setColumns(getValuesFromKeys(label_to_colno, 'LATITUDE', 'LONGITUDE'));
  function uniquifyMapView(view) {
    var dupRows = [];
    var currVals = [];
    for (var i=0; i<view.getNumberOfRows(); i++) {
      var next = [];
      for (var j=0; j<view.getNumberOfColumns(); j++) {
        next.push(view.getValue(i, j));
      }
      if (!currVals.compare(next)) {
        currVals = next;
      } else {
        dupRows.push(i);
      }
    }
    view.hideRows(dupRows);
  }
  uniquifyMapView(mapView);
  var map = new GV.Map($('#map')[0]);
  var mapOpts = {
    enableScrollWheel: true,
    showTip: true,
    showLine: true,
    lineColor: '#00ff00',
    lineWidth: 1,
    mapType: 'satellite',
    zoomLevel: 3
  };
  map.draw(mapView, mapOpts);

  var stationView = new GV.DataView(data_table);
  stationView.setColumns(getValuesFromKeys(label_to_colno,
    'SECT_ID', 'STNNBR', 'CASTNO', 'LATITUDE', 'LONGITUDE', 'DATE', 'TIME', 'DEPTH'));
  stationView.setRows([]);
  var stationOpts = {allowHtml: true};
  var station = new GV.Table($('#station')[0]);
  station.draw(stationView, stationOpts);

  var observationView = new GV.DataView(data_table);
  observationView.setRows([]);
  var observation = new GV.Table($('#observation')[0]);
  var observationOpts = {allowHtml: true, height: '200px', width: '100%'};
  observation.draw(observationView, observationOpts);

  GV.events.addListener(map, 'select', function() {
    var selection = this.getSelection();
    if (selection.length > 0) {
      var selectedrow = mapView.getTableRowIndex(selection[0].row);
      var stnnbrcol = label_to_colno['STNNBR'];
      var stnnbr = data_table.getValue(selectedrow, stnnbrcol);
      var dataColumns = data_table.getFilteredRows([{column: stnnbrcol, value: stnnbr}]);
      stationView.setRows([selectedrow]);
      observationView.setRows(dataColumns);
      station.draw(stationView, stationOpts);
      observation.draw(observationView, observationOpts);
    }
  });

  //var test = new GV.Table($('#test')[0]);
  //test.draw(mapView, tableOpts);
}
google.setOnLoadCallback(init);
</script>
<% end -%>
<% end -%>
